{"version":3,"sources":["users.js"],"names":["router","express","Router","emmailFormat","post","req","res","errors","body","password","length","push","text","name","test","email","status","send","existingUser","User","filter","user","success","message","newUser","userId","names","phone","salt","bcrypt","genSaltSync","hash","hashSync","err","get","userParcels","params","Number","eachUser","parcels","parcel","json","module","exports"],"mappings":"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","file":"users.js","sourceRoot":"/home/emmanuel/Projects/SelfProject/sendit/src/routes","sourcesContent":["import express from 'express';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport bcrypt from 'bcryptjs';\nimport User from '../data/users';\nimport parcels from '../data/parcels';\n\nconst router = express.Router();\nconst emmailFormat = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nrouter.post('/register', (req, res) => {\n  const errors = [];\n  if (req.body.password.length < 8) {\n    errors.push({\n      text: 'Password must be at least 8 characters',\n    });\n  }\n\n  if (req.body.name.length < 3) {\n    errors.push({\n      text: 'Your Names Should have at least 3 Character',\n    });\n  }\n\n  if (!emmailFormat.test(req.body.email)) {\n    errors.push({\n      text: 'Enter valid Email',\n    });\n  }\n\n  if (errors.length > 0) {\n    res.status(400).send(errors);\n  } else {\n    // Ckecking if the Email is already existing or Registered\n    const existingUser = User.filter(user => user.email === req.body.email);\n    if (existingUser.length > 0) {\n      return res.status(400).send({\n        success: false,\n        message: 'Email is already registered',\n      });\n    }\n    // code snipet from my friend Blaise to encrypyt password\n    try {\n      const newUser = {\n        userId: User.length + 1,\n        names: req.body.names,\n        email: req.body.email,\n        phone: req.body.phone,\n        password: req.body.password,\n      };\n      const salt = bcrypt.genSaltSync(10);\n      const hash = bcrypt.hashSync(newUser.password, salt);\n      newUser.password = hash;\n      User.push(newUser);\n\n      return res.status(201).send({\n        success: true,\n        message: 'User is successfully registered',\n      });\n    } catch (err) {\n      res.send({\n        success: false,\n        message: `Failed to register, error: ${err} `,\n      });\n    }\n  }\n  return res.send({\n    success: false,\n    message: 'User not registered! Please try again',\n  });\n});\n\n// Get user parcel delivery orders\nrouter.get('/:userId/parcels', (req, res) => {\n  let userParcels = [];\n  req.params.userId = Number(req.params.userId);\n\n  const user = User.filter(eachUser => eachUser.userId === req.params.userId);\n  if (user.length > 0) {\n    userParcels = parcels.filter(parcel => parcel.userId === req.params.userId);\n    if (userParcels.length > 0) {\n      return res.status(200).json({\n        success: true,\n        message: 'User parcels retrieved successfully',\n        userId: req.params.userId,\n        parcels: userParcels,\n      });\n    }\n    return res.status(404).json({\n      success: true,\n      message: 'User has no parcels',\n    });\n  }\n  return res.status(404).json({\n    success: false,\n    message: 'User not Exist',\n  });\n});\n\nmodule.exports = router;\n"]}