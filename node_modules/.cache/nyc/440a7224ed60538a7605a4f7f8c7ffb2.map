{"version":3,"sources":["test.spec.js"],"names":["chai","use","chaiHttp","request","app","get","then","res","to","have","status","body","be","an","property","eql","parcels","users","userId","names","email","phone","password","post","send","error"],"mappings":"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","file":"test.spec.js","sourceRoot":"/home/emmanuel/Projects/SelfProject/sendit/src/test","sourcesContent":["import chaiHttp from 'chai-http';\nimport chai, { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport app from '../app';\n\n\n// const pid = '98bdf263-a37b-433b-81f7-f557a74fdb85';\n// const url = 'http://localhost:5000';\nchai.use(chaiHttp);\n\ndescribe('SendIT API TESTS', () => {\n  /* // Test Invalid pathss\n  describe('/GET INVALID_PATH', () => {\n    it('should return not found', () => chai.request(app)\n      .get('/INVALID_PATH')\n      .then((res) => {\n        expect(res).to.have.status(404);\n      }));\n  });\n\n  // Test Parcels' requests\n  describe('Parcels', () => {\n    // Create parcel\n    describe('POST/ Parcel', () => {\n      // Parcel should be created\n      it('should create a parcel', () => {\n        const parcel = {\n          userId: 1,\n          parcel: {\n            parcelId: 1,\n            weigth: 40,\n            height: 80,\n            width: 40,\n            length: 90,\n            From: 'Kigali',\n            stateFrom: 'Kicukiro',\n            To: 'Rusizi',\n            stateTo: 'Muhondo',\n            services: 'Express',\n            status: 'delivered',\n          },\n        };\n        chai.request(app)\n          .post('/api/v1/parcels/')\n          .send(parcel)\n          .then((res) => {\n            expect(res).to.have.status(201);\n            expect(res.body).to.be.an('object');\n            expect(res.body).to.have.property('success').eql(true);\n            expect(res.body).to.have.property('parcelId');\n            expect(res.body).to.have.property('price');\n          });\n      });\n\n      // ASSIGN parcel to no exist User\n      it('should return user not exit', () => {\n        const parcel = {\n          userId: 'INVALID_USER_ID',\n          parcel: {\n            parcelId: 1,\n            weigth: 40,\n            height: 80,\n            width: 40,\n            length: 90,\n            From: 'Kigali',\n            stateFrom: 'Kicukiro',\n            To: 'Rusizi',\n            stateTo: 'Muhondo',\n            services: 'Express',\n            status: 'delivered',\n          },\n        };\n        chai.request(app)\n          .post('/api/v1/parcels/')\n          .send(parcel)\n          .then((res) => {\n            expect(res).to.have.status(404);\n            expect(res.body).to.be.an('object');\n            expect(res.body).to.have.property('success').eql(false);\n          });\n      });\n    });\n\n    // Get all parcels\n    describe('GET/ Parcels', () => {\n      it('should return all parcels', () => chai.request(app)\n        .get('/api/v1/parcels')\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body.parcels).to.be.an('array');\n        }));\n    });\n\n    // Get a Specific Parcel\n    describe('GET/ Specif Parcel', () => {\n\n      it('should return a parcel', () => chai.request(app)\n        .get(`/api/v1/parcels/${pid}`)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.have.property('success').eql(true);\n          expect(res.body.parcel).to.be.an('object');\n        }));\n\n      // Parcel not exit\n      it('should return parcel Not Exit', () => chai.request(app)\n        .get('/api/v1/parcels/4534PARCELID_NOT_EXIT')\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.have.property('success').eql(false);\n          expect(res.body).to.be.an('object');\n        }));\n    });\n\n    // Cancel a parcel\n    describe('PUT/ Cancel a parcel', () => {\n      // Should cancel a parcel\n      it('should cancel a parcel', () => chai.request(app)\n        .put(`/api/v1/parcels/${pid}/cancel`)\n        .then((res) => {\n          console.log(res.body);\n          expect(res).to.have.status(200);\n          expect(res.body).to.have.property('success').eql(true);\n          expect(res.body).to.have.property('parcel');\n          expect(res.body).to.be.an('object');\n        }));\n\n      // Should not allow to cancel a not booking-status parcel\nit('should not allow to cancel a parcel with status Delivered or Transit', () => chai.request(app)\n        .put('/api/v1/parcels/2/cancel')\n        .then((res) => {\n          expect(res).to.have.status(405);\n          expect(res.body).to.have.property('success').eql(false);\n        }));\n\n      // Parcel not found\n      it('should return Not Found', () => chai.request(app)\n        .put('/api/v1/parcels/234_INVALID_PARCEL_ID/cancel')\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.have.property('success').eql(false);\n        }));\n    });\n  }); */\n\n  // USER TESTS\n  describe('Users', () => {\n    // User parcels\n    describe('GET/ User parcels', () => {\n      // Get user parcels\n      it('should get all user parcels', () => chai.request(app)\n        .get('/api/v1/users/1/parcels')\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('success').eql(true);\n          expect(res.body.parcels).to.be.an('array');\n        }));\n\n      // User has no parcels\n      it('should return user parcels not found', () => chai.request(app)\n        .get('/api/v1/users/3/parcels')\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('success').eql(false);\n          expect(res.body).to.have.property('message').eql('User has no parcels');\n        }));\n\n      // User not found\n      it('should return user not found', () => chai.request(app)\n        .get('/api/v1/users/3_INVALID_USER_ID/parcels')\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('success').eql(false);\n          expect(res.body).to.have.property('message').eql('User not Exist');\n        }));\n    });\n\n    // Register user\n    describe('POST/ Register user', () => {\n      // User should be registered\n      it('should register new user', () => {\n        const users = [\n          {\n            userId: 1,\n            names: 'Emmanuel TUYISHIMIRE',\n            email: 'egentle05@gmail.com',\n            phone: 250788208798,\n            password: 'jesus',\n          },\n        ];\n        chai.request(app).post('/api/v1/users/register')\n          .send(users)\n          .then((res) => {\n            expect(res).to.have.status(201);\n            expect(res.body).to.be.an('object');\n            expect(res.body).to.have.property('success').eql(true);\n          });\n      });\n\n      // Existing Email\n      it('should return email has already registered', () => {\n        const users = {\n          userId: 1,\n          names: 'Emmanuel TUYISHIMIRE',\n          email: 'egentle05@gmail.com',\n          password: 'jesus',\n        };\n        chai.request(app).post('/api/v1/users/register')\n          .send(users)\n          .then((res) => {\n            expect(res).to.have.status(400);\n            expect(res.body).to.be.an('object');\n            expect(res.body).to.have.property('success').eql(false);\n          });\n      });\n\n      // Errors bad request\n      it('should return valid data required', () => {\n        const users = {\n          userId: 1,\n          names: 'Emmanuel TUYISHIMIRE',\n          email: 'egentle05@gmail.com',\n          password: 'jesus',\n        };\n        chai.request(app).post('/api/v1/users/register')\n          .send(users)\n          .then((res) => {\n            expect(res).to.have.status(400);\n            expect(res.body).to.be.an('object');\n            expect(res.body).to.have.property('success').eql(false);\n            expect(res.body.error).to.be.an('array');\n          });\n      });\n    });\n  });\n});\n"]}