{"version":3,"sources":["users.js"],"names":["router","express","Router","post","req","res","errors","body","password","length","push","text","names","email","indexOf","status","send","existingUser","User","filter","user","success","message","newUser","userId","salt","bcrypt","genSaltSync","hash","hashSync","err","get","userParcels","params","Number","eachUser","Parcels","forEach","parcel","json","parcels","module","exports"],"mappings":"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","file":"users.js","sourceRoot":"/home/emmanuel/Projects/SelfProject/sendit/src/routes","sourcesContent":["import express from 'express';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport bcrypt from 'bcryptjs';\nimport User from '../data/users';\nimport Parcels from '../data/parcels';\n\nconst router = express.Router();\n\nrouter.post('/register', (req, res) => {\n  const errors = [];\n\n  if (req.body.password.length < 8) {\n    errors.push({\n      text: 'Passwor must be at least 8 characters',\n    });\n  }\n\n  if (req.body.names.length < 3) {\n    errors.push({\n      text: 'Your Names Should have at least 3 Character',\n    });\n  }\n\n  if (\n    req.body.email.indexOf('@') === -1 || req.body.email.indexOf('.') === -1\n  ) {\n    errors.push({\n      text: 'Enter valid Email',\n    });\n  }\n\n  if (errors.length > 0) {\n    res.status(400).send(errors);\n  } else {\n    // Ckecking if the Email is already existing or Registered\n    const existingUser = User.filter(user => user.email === req.body.email);\n    if (existingUser.length > 0) {\n      return res.status(400).send({\n        success: false,\n        message: 'Email is already registered',\n      });\n    }\n    // code snipet from my friend Blaise to encrypyt password\n    try {\n      const newUser = {\n        userId: User.length + 1,\n        names: req.body.names,\n        email: req.body.email,\n        password: req.body.password,\n      };\n      const salt = bcrypt.genSaltSync(10);\n      const hash = bcrypt.hashSync(newUser.password, salt);\n      newUser.password = hash;\n      User.push(newUser);\n\n      return res.status(201).send({\n        success: true,\n        message: 'User is successfully registered',\n      });\n    } catch (err) {\n      res.send({\n        success: false,\n        message: `Failed to register, error: ${err} `,\n      });\n    }\n  }\n  return res.send({\n    success: false,\n    message: 'User not registered! Please try again',\n  });\n});\n\n// Get user parcel delivery orders\nrouter.get('/:userId/parcels', (req, res) => {\n  const userParcels = [];\n  req.params.userId = Number(req.params.userId);\n\n  const user = User.filter(eachUser => eachUser.userId === req.params.userId);\n  if (user.length > 0) {\n    Parcels.forEach((parcel) => {\n      if (parcel.userId === req.params.userId) {\n        userParcels.push(parcel.parcel);\n      }\n    });\n\n    if (userParcels.length > 0) {\n      return res.status(200).json({\n        success: true,\n        message: 'User parcels retrieved successfully',\n        userId: req.params.userId,\n        parcels: userParcels,\n      });\n    }\n    return res.status(404).json({\n      success: true,\n      message: 'User has no parcels',\n    });\n  }\n  return res.status(404).json({\n    success: false,\n    message: 'User not Exist',\n  });\n});\n\nmodule.exports = router;\n"]}